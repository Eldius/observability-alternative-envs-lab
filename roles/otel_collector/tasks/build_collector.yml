---

# - name: Create OTEL Collector user group
#   ansible.builtin.group:
#     name: otel
#     state: present
#   become: true

# - name: Create OTEL Collector system user
#   ansible.builtin.user:
#     name: otel
#     comment: OTEL Collector service user
#     group: otel
#     state: present
#     system : true
#   become: true

# - name: Create directories
#   ansible.builtin.file:
#     path: "{{ item }}"
#     state: directory
#     mode: '0755'
#     owner: otel
#     group: otel
#   become: true
#   loop:
#     - "{{ install_dir }}"
#     - "{{ install_dir }}/conf"
#     - "{{ install_dir }}/data"
#     - "{{ install_dir }}/tmp"
#   register: create_folders_res

# - name: Unpack Jaeger bin package
#   ansible.builtin.unarchive:
#     src: "{{ download_url }}"
#     dest: "{{ install_dir }}"
#     mode: '0755'
#     owner: otel
#     group: otel
#     remote_src: true
#     extra_opts:
#       - '--strip-components=1'
#       - '--show-stored-names'
#   become: true
#   register: create_folders_res


# - name: Create service definition file
#   ansible.builtin.template:
#     src: loki.service.j2
#     dest: /etc/systemd/system/loki.service
#     owner: root
#     group: root
#   become: true
#   notify:
#     - Restart OTEL Collector

# - name: Create OTEL Collector configuration file
#   ansible.builtin.template:
#     src: local-config.yaml.j2
#     dest: "{{ install_dir }}/conf/local-config.yaml"
#     owner: loki
#     group: loki
#   become: true
#   notify:
#     - Restart Loki

# - name: Wait until Grafana Tempo is up and running...
#   uri:
#     url: 'http://{{ ansible_default_ipv4.address }}:3100/ready
#     return_content: yes
#     validate_certs: no
#     status_code:
#       - 200
#   until: uri_output.status == 200
#   retries: 24 # Retries for 24 * 15 seconds = 360 seconds = 6 minutes
#   delay: 15 # Every 15 seconds
#   register: uri_output

# - name: API test result
#   debug:
#     msg: "{{ uri_output }}"

- name: Testing variables
  debug:
    msg:
      "collector_version": "{{ collector_version }}"
      "package_url": "{{ package_url }}"
      "builder_binary_url": "{{ builder_binary_url }}"
      "go_sdk_package_url": "{{ go_sdk_package_url }}"
      "install_arch": "{{ install_arch }}"

- name: Unpack GO SDK package
  ansible.builtin.unarchive:
    src: "{{ go_sdk_package_url }}"
    dest: "{{ install_dir }}/tools"
    mode: '0755'
    owner: otel
    group: otel
    remote_src: true
  become: true

- name: List Go SDK files
  shell: "ls -lha {{ install_dir }}/tools"
  environment:
    MY_ENV_VARIABLE: whatever_value

- name: Debug Go version
  shell: "go version"
  environment:
    PATH: "$PATH:{{ install_dir }}/tools/go/bin"
  register: go_version_res

- name: Debug downloaded files
  debug:
    msg: "{{ go_version_res.stdout_lines }}"

- name: Download OTEL Collector Builder
  ansible.builtin.get_url:
    url: "{{ builder_binary_url }}"
    dest: "{{ install_dir }}/tools/ocb"
    mode: '0755'
    owner: otel
    group: otel
  become: true

- name: Generate otelcol-builder.yaml file
  ansible.builtin.template:
    src: otelcol-builder.yaml
    dest: "{{ install_dir }}/conf/otelcol-builder.yaml"
    owner: otel
    group: otel
  become: true
  register: config_task_res

- name: Build OTEL Collector
  shell: "{{ install_dir }}/tools/ocb --config {{ install_dir }}/conf/otelcol-builder.yaml"
  environment:
    PATH: "$PATH:{{ install_dir }}/tools/go/bin"
    GOCACHE: "{{ install_dir }}/tmp"
  register: otelcol_build_res

- name: Build output
  debug:
    msg: "{{ otelcol_build_res.stdout_lines }}"

# - name: Building OTEL Collector
#   shell: "echo $MY_ENV_VARIABLE"
#   environment:
#     PATH: "$PATH:{{ install_dir }}/tools/go/bin"
